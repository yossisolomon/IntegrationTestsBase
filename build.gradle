buildscript {
    repositories {
        jcenter()
    }
    dependencies {
//        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.10.9"
//        classpath "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.0.2"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'jsonschema2pojo'
//apply plugin: 'docker-compose'

//dockerCompose.isRequiredBy(test)

//dockerCompose {
//    forceRecreate = true // pass '--force-recreate' and '--renew-anon-volumes' when calling 'docker-compose up' when set to 'true`
//    captureContainersOutputToFiles = '/tmp/docker-compose/' // sends output of all services to a dedicated log file in the directory specified, e.g. 'web.log' for service named 'log'
//}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            "org.apache.kafka:kafka-clients:2.4.0",
            "org.slf4j:slf4j-nop:1.7.25",
            "org.seleniumhq.selenium:selenium-java:3.141.59")

    testImplementation(
            "org.awaitility:awaitility:4.0.2",
            "org.junit.jupiter:junit-jupiter-api:5.6.0",
            "com.google.truth:truth:1.0.1",
            "io.rest-assured:rest-assured:4.2.0")

    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:5.6.0")

    compile(
            "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.0.2")
}

task dockerCompose {
    exec {
        workingDir '.'
        commandLine 'sh', '-c', 'docker-compose down -v && docker-compose up -d > /tmp/docker-compose'
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

//test.dependsOn(dockerCompose)

//jsonSchema2Pojo {
//    targetPackage = 'org.example.json.schema'
//    generateBuilders = true
//    propertyWordDelimiters = ['_'] as char[]
//}
